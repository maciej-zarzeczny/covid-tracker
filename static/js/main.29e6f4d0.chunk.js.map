{"version":3,"sources":["app/loader/Loader.js","features/stats/statsSlice.js","app/navbar/Navbar.js","app/numberFormatter.js","features/stats/stats-cards/StatsCard.js","features/stats/stats-cards/StatsCards.js","features/stats/global-data/DangerCountry.js","features/stats/global-data/GlobalData.js","features/stats/stats-chart/StatsChart.js","app/home-page/HomePage.js","app/map-page/MapPage.js","features/stats/stats-table/StatsTable.js","app/list-page/ListPage.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Loader","fullPage","className","classNames","size","color","loading","fetchGlobalData","createAsyncThunk","a","requestOptions","method","redirect","axios","get","response","status","data","fetchCountryData","country","statsSlice","createSlice","name","initialState","countryDataStatus","countryData","currentCountry","error","reducers","changedCountry","state","action","payload","extraReducers","pending","fulfilled","Countries","rejected","message","actions","selectAllCountries","stats","selectCurrentCountry","selectGlobalData","Global","selectCountryData","Navbar","useState","isActive","setIsActive","handleNavbarClose","data-testid","onClick","exact","to","activeClassName","SI_SYMBOL","numberFormatter","number","tier","Math","log10","suffix","pow","toFixed","StatsCard","title","icon","useMemo","StatsCards","dispatch","useDispatch","type","setType","countries","useSelector","renderedCountries","map","idx","value","Slug","key","Country","onChange","e","target","selectedCountry","find","TotalConfirmed","NewConfirmed","TotalDeaths","NewDeaths","TotalRecovered","NewRecovered","DangerCountry","dangerCountry","setDangerCountry","useEffect","length","maxCases","tempCountry","forEach","GlobalData","StatsChart","ctx","useRef","setData","dataType","setDataType","timePeriod","setTimePeriod","dataToShow","slice","max","labels","datasets","backgroundColor","borderColor","pointBorderColor","pointHoverRadius","pointHoverBackgroundColor","el","push","moment","Date","Confirmed","Deaths","Recovered","options","legend","display","responsive","maintainAspectRatio","scales","xAxes","time","unit","HomePage","globalData","currentDate","toLocaleDateString","undefined","year","month","day","MapPage","chartData","setChartData","colors","setColors","countriesData","CountryCode","width","height","chartType","loader","colorAxis","mapsApiKey","rootProps","StatsTable","tableData","setTableData","sortBy","setSortBy","renderedRows","sortedByCountry","sort","b","sortedByCases","sortedByNewCases","sortedByDeaths","sortedByNewDeaths","sortedByRecovered","sortedByNewRecovered","handleSortedByChange","data-tip","ListPage","App","path","component","configureStore","reducer","statsReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.29e6f4d0.chunk.js","sourcesContent":["import React from \"react\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport classNames from \"classnames\";\n\nimport \"./Loader.css\";\n\nexport const Loader = ({ fullPage }) => {\n  return (\n    <div className={classNames(\"loader-container\", { \"loader-container--full\": fullPage })}>\n      <ClipLoader size={64} color={\"#123abc\"} loading={true} />\n    </div>\n  );\n};\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nconst initialState = {\n  status: \"idle\",\n  countryDataStatus: \"idle\",\n  data: [],\n  countryData: [],\n  currentCountry: {},\n  error: null,\n};\n\nexport const fetchGlobalData = createAsyncThunk(\"stats/fetchGlobalData\", async () => {\n  const requestOptions = {\n    method: \"GET\",\n    redirect: \"follow\",\n  };\n\n  const response = await axios.get(\"https://api.covid19api.com/summary\", requestOptions);\n\n  return { status: response.status, data: response.data };\n});\n\n// Fetch data from day one for specific country\nexport const fetchCountryData = createAsyncThunk(\"stats/fetchCountryData\", async (country) => {\n  const requestOptions = {\n    method: \"GET\",\n    redirect: \"follow\",\n  };\n\n  const response = await axios.get(\n    `https://api.covid19api.com/total/dayone/country/${country}`,\n    requestOptions\n  );\n  return { status: response.status, data: response.data };\n});\n\nconst statsSlice = createSlice({\n  name: \"stats\",\n  initialState,\n  reducers: {\n    changedCountry: (state, action) => {\n      const { country } = action.payload;\n      state.currentCountry = country;\n    },\n  },\n  extraReducers: {\n    [fetchGlobalData.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchGlobalData.fulfilled]: (state, action) => {\n      const { status, data } = action.payload;\n\n      if (status === 200) {\n        state.status = \"succeeded\";\n        state.data = data;\n        state.currentCountry = data.Countries[0];\n      } else {\n        state.status = \"failed\";\n        state.error = \"There was an error, please try again.\";\n      }\n    },\n    [fetchGlobalData.rejected]: (state, action) => {\n      state.status = \"failed\";\n      state.error = action.error.message;\n    },\n\n    [fetchCountryData.pending]: (state, action) => {\n      state.countryDataStatus = \"loading\";\n    },\n    [fetchCountryData.fulfilled]: (state, action) => {\n      const { status, data } = action.payload;\n\n      if (status === 200) {\n        state.countryDataStatus = \"succeeded\";\n        state.countryData = data;\n      } else {\n        state.countryDataStatus = \"failed\";\n        state.error = \"There was an error, please try again.\";\n      }\n    },\n    [fetchCountryData.rejected]: (state, action) => {\n      state.countryDataStatus = \"failed\";\n      state.error = action.error.message;\n    },\n  },\n});\n\nexport const { changedCountry } = statsSlice.actions;\n\nexport default statsSlice.reducer;\n\nexport const selectAllCountries = (state) => state.stats.data.Countries;\n\nexport const selectCurrentCountry = (state) => state.stats.currentCountry;\n\nexport const selectGlobalData = (state) => state.stats.data.Global;\n\nexport const selectCountryData = (state) => state.stats.countryData;\n","import React, { useState } from \"react\";\nimport { FaChartLine, FaMapMarkedAlt, FaListUl } from \"react-icons/fa\";\nimport { MdClose } from \"react-icons/md\";\nimport { GiHamburgerMenu } from \"react-icons/gi\";\nimport { NavLink } from \"react-router-dom\";\nimport classNames from \"classnames\";\n\nimport \"./Navbar.css\";\n\nexport const Navbar = () => {\n  const [isActive, setIsActive] = useState(false);\n\n  const handleNavbarClose = () => {\n    setIsActive(false);\n  };\n\n  const handleNavbarOpen = () => {\n    setIsActive(true);\n  };\n\n  return (\n    <>\n      <nav className={classNames(\"navbar\", { \"navbar--active\": isActive })} data-testid=\"navbar\">\n        <MdClose className=\"navbar__close title\" onClick={handleNavbarClose} />\n        <h1 className=\"title title--light navbar__logo\">CovidTracker</h1>\n\n        <div className=\"navbar__items\">\n          <NavLink\n            exact\n            to=\"/covid-tracker\"\n            className=\"navbar__item\"\n            activeClassName=\"navbar__item--active\"\n            onClick={handleNavbarClose}\n          >\n            <FaChartLine />\n          </NavLink>\n\n          <NavLink\n            data-testid=\"map-page\"\n            to=\"/covid-tracker/map\"\n            className=\"navbar__item\"\n            activeClassName=\"navbar__item--active\"\n            onClick={handleNavbarClose}\n          >\n            <FaMapMarkedAlt />\n          </NavLink>\n\n          <NavLink\n            data-testid=\"list-page\"\n            to=\"/covid-tracker/list\"\n            className=\"navbar__item\"\n            activeClassName=\"navbar__item--active\"\n            onClick={handleNavbarClose}\n          >\n            <FaListUl />\n          </NavLink>\n        </div>\n      </nav>\n\n      <div\n        className={classNames(\"navbar-trigger\", { \"navbar-trigger--active\": !isActive })}\n        onClick={handleNavbarOpen}\n      >\n        <GiHamburgerMenu className=\"title\" />\n      </div>\n\n      <div className={classNames(\"app-overlay\", { \"app-overlay--active\": isActive })} />\n    </>\n  );\n};\n","const SI_SYMBOL = [\"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n\nexport const numberFormatter = (number) => {\n  // what tier? (determines SI symbol)\n  const tier = (Math.log10(number) / 3) | 0;\n\n  // if zero, we don't need a suffix\n  if (tier === 0) return number;\n\n  // get suffix and determine scale\n  const suffix = SI_SYMBOL[tier];\n  const scale = Math.pow(10, tier * 3);\n\n  // scale the number\n  const scaled = number / scale;\n\n  // format number and add suffix\n  return scaled.toFixed(1) + suffix;\n};\n","import React, { useMemo } from \"react\";\nimport { FaBriefcaseMedical } from \"react-icons/fa\";\nimport { GiDeathSkull, GiHealthNormal } from \"react-icons/gi\";\n\nimport { numberFormatter } from \"../../../app/numberFormatter\";\n\nexport const StatsCard = ({ color, title, data }) => {\n  const icon = useMemo(() => {\n    switch (title) {\n      case \"Cases\":\n        return <FaBriefcaseMedical className=\"is-warning subtitle\" />;\n\n      case \"Deaths\":\n        return <GiDeathSkull className=\"is-danger subtitle\" />;\n\n      case \"Recovered\":\n        return <GiHealthNormal className=\"is-success subtitle\" />;\n\n      default:\n        return <FaBriefcaseMedical className=\"is-warning subtitle\" />;\n    }\n  }, [title]);\n\n  return (\n    <article className=\"card card--big card--hover stats-card\">\n      <span className={`stats-card__decoration stats-card__decoration--${color}`}></span>\n      <header className=\"stats-card__header\">\n        <p className=\"subtitle\">{title}</p>\n        {icon}\n      </header>\n\n      <h1 className=\"title title--dark\">{numberFormatter(data)}</h1>\n    </article>\n  );\n};\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport \"./StatsCards.css\";\nimport { StatsCard } from \"./StatsCard\";\nimport { selectAllCountries, changedCountry, selectCurrentCountry } from \"../statsSlice\";\n\nexport const StatsCards = () => {\n  const dispatch = useDispatch();\n  const [type, setType] = useState(\"all\");\n\n  const countries = useSelector(selectAllCountries);\n  const country = useSelector(selectCurrentCountry);\n\n  // Handle country selection\n  const handleCountryChange = (e) => {\n    const { value } = e.target;\n\n    const selectedCountry = countries.find((country) => country.Slug === value);\n    dispatch(changedCountry({ country: selectedCountry }));\n  };\n\n  // Handle data type selection\n  const handleStatsTypeChange = (e) => {\n    setType(e.target.value);\n  };\n\n  // Render all countries as select options\n  const renderedCountries = countries.map((country, idx) => (\n    <option data-testid=\"country-option\" value={country.Slug} key={idx}>\n      {country.Country}\n    </option>\n  ));\n\n  return (\n    <section className=\"stats-cards\">\n      <header className=\"stats-cards__header inline-container\">\n        <select\n          data-testid=\"countries-select\"\n          className=\"button\"\n          value={country.Slug}\n          onChange={handleCountryChange}\n        >\n          {renderedCountries}\n        </select>\n\n        <select\n          data-testid=\"data-type-select\"\n          className=\"button data-type\"\n          onChange={handleStatsTypeChange}\n        >\n          <option value=\"all\">All data</option>\n          <option value=\"daily\">Daily data</option>\n        </select>\n      </header>\n\n      <section className=\"stats-cards__content\">\n        <StatsCard\n          color=\"warning\"\n          title=\"Cases\"\n          data={type === \"all\" ? country.TotalConfirmed : country.NewConfirmed}\n        />\n\n        <StatsCard\n          color=\"danger\"\n          title=\"Deaths\"\n          data={type === \"all\" ? country.TotalDeaths : country.NewDeaths}\n        />\n\n        <StatsCard\n          color=\"success\"\n          title=\"Recovered\"\n          data={type === \"all\" ? country.TotalRecovered : country.NewRecovered}\n        />\n      </section>\n    </section>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { IoIosWarning } from \"react-icons/io\";\n\nimport \"./GlobalData.css\";\nimport { numberFormatter } from \"../../../app/numberFormatter\";\nimport { selectAllCountries } from \"../statsSlice\";\n\nexport const DangerCountry = () => {\n  const countries = useSelector(selectAllCountries);\n  const [dangerCountry, setDangerCountry] = useState({});\n\n  // Find country with the most cases\n  useEffect(() => {\n    if (countries.length === 0) return;\n\n    let maxCases = 0;\n    let tempCountry = {};\n    countries.forEach((country) => {\n      if (country.NewConfirmed > maxCases) {\n        maxCases = country.NewConfirmed;\n        tempCountry = country;\n      }\n    });\n\n    setDangerCountry(tempCountry);\n  }, [countries]);\n\n  return (\n    <article className=\"global-card card card--big card--hover\">\n      <header className=\"global-card__header global-card__header--danger\">\n        <p className=\"subtitle header__title\">{dangerCountry.Country} (most new cases)</p>\n        <IoIosWarning className=\"subtitle\" />\n      </header>\n\n      <div className=\"global-card__info\">\n        <p className=\"subtitle\">Total cases</p>\n        <p className=\"subtitle is-warning\">{numberFormatter(dangerCountry.TotalConfirmed)}</p>\n      </div>\n\n      <div className=\"global-card__info\">\n        <p className=\"subtitle\">Total deaths</p>\n        <p className=\"subtitle is-danger\">{numberFormatter(dangerCountry.TotalDeaths)}</p>\n      </div>\n\n      <div className=\"global-card__info\">\n        <p className=\"subtitle\">Total recovered</p>\n        <p className=\"subtitle is-success\">{numberFormatter(dangerCountry.TotalRecovered)}</p>\n      </div>\n\n      <div className=\"separator\" />\n\n      <div className=\"global-card__info\">\n        <p className=\"subtitle\">New cases</p>\n        <p className=\"subtitle is-warning\">{numberFormatter(dangerCountry.NewConfirmed)}</p>\n      </div>\n\n      <div className=\"global-card__info\">\n        <p className=\"subtitle\">New deaths</p>\n        <p className=\"subtitle is-danger\">{numberFormatter(dangerCountry.NewDeaths)}</p>\n      </div>\n\n      <div className=\"global-card__info\">\n        <p className=\"subtitle\">New recovered</p>\n        <p className=\"subtitle is-success\">{numberFormatter(dangerCountry.NewRecovered)}</p>\n      </div>\n    </article>\n  );\n};\n","import React from \"react\";\nimport { ImEarth } from \"react-icons/im\";\n\nimport \"./GlobalData.css\";\nimport { numberFormatter } from \"../../../app/numberFormatter\";\nimport { DangerCountry } from \"./DangerCountry\";\n\nexport const GlobalData = ({ data }) => {\n  return (\n    <section className=\"global-data\">\n      <article className=\"global-card card card--big card--hover\">\n        <header className=\"global-card__header global-card__header--info\">\n          <p className=\"subtitle header__title\">Worldwide</p>\n          <ImEarth className=\"subtitle\" />\n        </header>\n\n        <div className=\"global-card__info\">\n          <p className=\"subtitle\">Total cases</p>\n          <p className=\"subtitle is-warning\">{numberFormatter(data.TotalConfirmed)}</p>\n        </div>\n\n        <div className=\"global-card__info\">\n          <p className=\"subtitle\">Total deaths</p>\n          <p className=\"subtitle is-danger\">{numberFormatter(data.TotalDeaths)}</p>\n        </div>\n\n        <div className=\"global-card__info\">\n          <p className=\"subtitle\">Total recovered</p>\n          <p className=\"subtitle is-success\">{numberFormatter(data.TotalRecovered)}</p>\n        </div>\n\n        <div className=\"separator\" />\n\n        <div className=\"global-card__info\">\n          <p className=\"subtitle\">New cases</p>\n          <p className=\"subtitle is-warning\">{numberFormatter(data.NewConfirmed)}</p>\n        </div>\n\n        <div className=\"global-card__info\">\n          <p className=\"subtitle\">New deaths</p>\n          <p className=\"subtitle is-danger\">{numberFormatter(data.NewDeaths)}</p>\n        </div>\n\n        <div className=\"global-card__info\">\n          <p className=\"subtitle\">New recovered</p>\n          <p className=\"subtitle is-success\">{numberFormatter(data.NewRecovered)}</p>\n        </div>\n      </article>\n\n      <DangerCountry />\n    </section>\n  );\n};\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport moment from \"moment\";\n\nimport \"./StatsChart.css\";\nimport { fetchCountryData, selectCountryData, selectCurrentCountry } from \"../statsSlice\";\n\nexport const StatsChart = () => {\n  const dispatch = useDispatch();\n  const ctx = useRef(null);\n\n  const countryData = useSelector(selectCountryData);\n  const country = useSelector(selectCurrentCountry);\n  const [data, setData] = useState({});\n  const [dataType, setDataType] = useState(\"cases\");\n  const [timePeriod, setTimePeriod] = useState(\"all\");\n\n  // When selected country changes fetch chart data\n  useEffect(() => {\n    dispatch(fetchCountryData(country.Slug));\n  }, [dispatch, country]);\n\n  // When data changes create or update chart\n  useEffect(() => {\n    if (countryData.length === 0) return;\n\n    let dataToShow = [];\n\n    switch (timePeriod) {\n      case \"all\":\n        dataToShow = [...countryData];\n        break;\n\n      case \"month\":\n        dataToShow = countryData.slice(Math.max(countryData.length - 30, 0));\n        break;\n\n      case \"week\":\n        dataToShow = countryData.slice(Math.max(countryData.length - 7, 0));\n        break;\n\n      default:\n        break;\n    }\n\n    let labels = [];\n    let datasets = {\n      backgroundColor: \"\",\n      borderColor: \"\",\n      pointBorderColor: \"rgba(0, 0, 0, 0)\",\n      pointHoverRadius: 10,\n      data: [],\n    };\n\n    switch (dataType) {\n      case \"cases\":\n        datasets.backgroundColor = \"rgba(255, 192, 5, 0.1)\";\n        datasets.borderColor = \"rgba(255, 192, 5, 1\";\n        datasets.pointHoverBackgroundColor = \"rgba(255, 192, 5, 1\";\n\n        dataToShow.forEach((el) => {\n          labels.push(moment(el.Date));\n          datasets.data.push(el.Confirmed);\n        });\n        break;\n\n      case \"deaths\":\n        datasets.backgroundColor = \"rgba(208, 44, 60, 0.1)\";\n        datasets.borderColor = \"rgba(208, 44, 60, 1)\";\n        datasets.pointHoverBackgroundColor = \"rgba(208, 44, 60, 1)\";\n\n        dataToShow.forEach((el) => {\n          labels.push(moment(el.Date));\n          datasets.data.push(el.Deaths);\n        });\n        break;\n\n      case \"recovered\":\n        datasets.backgroundColor = \"rgba(39, 167, 68, 0.1)\";\n        datasets.borderColor = \"rgba(39, 167, 68, 1)\";\n        datasets.pointHoverBackgroundColor = \"rgba(39, 167, 68, 1)\";\n\n        dataToShow.forEach((el) => {\n          labels.push(moment(el.Date));\n          datasets.data.push(el.Recovered);\n        });\n        break;\n\n      default:\n        break;\n    }\n\n    setData({ labels, datasets: [datasets] });\n  }, [ctx, countryData, dataType, timePeriod]);\n\n  const handleDataTypeChange = (e) => {\n    setDataType(e.target.value);\n  };\n\n  const handleTimePeriodChange = (e) => {\n    setTimePeriod(e.target.value);\n  };\n\n  return (\n    <section className=\"stats-chart\">\n      <header className=\"stats-chart__header inline-container\">\n        <p className=\"subtitle\">\n          <span className=\"stats-chart__data-type\">{dataType}</span> chart for {country.Country}\n        </p>\n\n        <div className=\"inline-container\">\n          <select className=\"button\" onChange={handleTimePeriodChange}>\n            <option value=\"all\">From the beginning </option>\n            <option value=\"month\">Last 30 days</option>\n            <option value=\"week\">Last 7 days</option>\n          </select>\n\n          <select className=\"button\" onChange={handleDataTypeChange}>\n            <option value=\"cases\">Cases</option>\n            <option value=\"deaths\">Deaths</option>\n            <option value=\"recovered\">Recovered</option>\n          </select>\n        </div>\n      </header>\n\n      <div className=\"card card--big stats-chart__canvas\">\n        <Line\n          data={data}\n          options={{\n            legend: { display: false },\n            responsive: true,\n            maintainAspectRatio: true,\n            scales: {\n              xAxes: [\n                {\n                  type: \"time\",\n                  time: {\n                    unit: timePeriod === \"all\" ? \"month\" : \"day\",\n                  },\n                },\n              ],\n            },\n          }}\n        />\n      </div>\n    </section>\n  );\n};\n","import React from \"react\";\nimport { FaRegCalendarAlt } from \"react-icons/fa\";\nimport { useSelector } from \"react-redux\";\n\nimport \"./HomePage.css\";\nimport { selectGlobalData } from \"../../features/stats/statsSlice\";\nimport { StatsCards } from \"../../features/stats/stats-cards/StatsCards\";\nimport { GlobalData } from \"../../features/stats/global-data/GlobalData\";\nimport { StatsChart } from \"../../features/stats/stats-chart/StatsChart\";\n\nexport const HomePage = () => {\n  const globalData = useSelector(selectGlobalData);\n  const error = useSelector((state) => state.stats.error);\n\n  // Get current date\n  const currentDate = new Date().toLocaleDateString(undefined, {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n  });\n\n  return (\n    <section className=\"home-page container\">\n      {error ? (\n        <div className=\"error\">\n          <p className=\"subtitle is-danger\">There was an error: {error}</p>\n        </div>\n      ) : (\n        <>\n          <header className=\"home-page__header\">\n            <div>\n              <h1 className=\"title\">Hello,</h1>\n              <h2 className=\"subtitle\">Here is your daily statistics</h2>\n            </div>\n\n            <div className=\"card card--small inline-container\">\n              <p className=\"text\">{currentDate}</p>\n              <FaRegCalendarAlt className=\"text\" />\n            </div>\n          </header>\n\n          <StatsCards />\n          <GlobalData data={globalData} />\n          <StatsChart />\n        </>\n      )}\n    </section>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Chart } from \"react-google-charts\";\nimport { useSelector } from \"react-redux\";\n\nimport \"./MapPage.css\";\nimport { selectAllCountries } from \"../../features/stats/statsSlice\";\n\nexport const MapPage = () => {\n  const [chartData, setChartData] = useState([]);\n  const [dataType, setDataType] = useState(\"cases\");\n  const [colors, setColors] = useState([\"#FFF9EC\", \"#ffc005\"]);\n\n  const error = useSelector((state) => state.stats.error);\n  const countriesData = useSelector(selectAllCountries);\n\n  useEffect(() => {\n    if (countriesData) {\n      let data = [];\n\n      switch (dataType) {\n        case \"cases\":\n          data.push([\"Country\", \"Cases\"]);\n\n          countriesData.forEach((country) => {\n            data.push([country.CountryCode, country.TotalConfirmed]);\n          });\n\n          setColors([\"#FFF9EC\", \"#ffc005\"]);\n          break;\n\n        case \"deaths\":\n          data.push([\"Country\", \"Deaths\"]);\n\n          countriesData.forEach((country) => {\n            data.push([country.CountryCode, country.TotalDeaths]);\n          });\n\n          setColors([\"#FBECED\", \"#D02E3D\"]);\n          break;\n\n        case \"recovered\":\n          data.push([\"Country\", \"Recovered\"]);\n\n          countriesData.forEach((country) => {\n            data.push([country.CountryCode, country.TotalRecovered]);\n          });\n\n          setColors([\"#EDF7EE\", \"#27A744\"]);\n          break;\n\n        default:\n          break;\n      }\n\n      setChartData(data);\n    }\n  }, [countriesData, dataType]);\n\n  const handleDataTypeChange = (e) => {\n    setDataType(e.target.value);\n  };\n\n  return (\n    <section className=\"map-page container\">\n      {error ? (\n        <div className=\"error error--map\">\n          <p className=\"subtitle is-danger\">There was an error: {error}</p>\n        </div>\n      ) : (\n        <>\n          <header className=\"map-page__header\">\n            <h1 className=\"title\">Hello,</h1>\n            <h2 className=\"subtitle\">Here is the statistics on the map</h2>\n          </header>\n\n          <div className=\"map-page__button\">\n            <select\n              data-testid=\"countries-select\"\n              className=\"button\"\n              onChange={handleDataTypeChange}\n            >\n              <option value=\"cases\">Cases</option>\n              <option value=\"deaths\">Deaths</option>\n              <option value=\"recovered\">Recovered</option>\n            </select>\n          </div>\n\n          <div className=\"map-page__map card card--big\">\n            <Chart\n              width={\"100%\"}\n              height={\"100%\"}\n              chartType=\"GeoChart\"\n              loader={<p className=\"subtitle map__loading-text\">Loading map...</p>}\n              data={chartData}\n              options={{\n                colorAxis: { colors: colors },\n              }}\n              mapsApiKey=\"AIzaSyDP-ETqkV7JO8KPfEl89q22cdg1z3jV01c\"\n              rootProps={{ \"data-testid\": \"1\" }}\n            />\n          </div>\n        </>\n      )}\n    </section>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport ReactTooltip from \"react-tooltip\";\nimport classNames from \"classnames\";\n\nimport \"./StatsTable.css\";\nimport { selectAllCountries } from \"../statsSlice\";\n\nexport const StatsTable = () => {\n  const countriesData = useSelector(selectAllCountries);\n\n  const [tableData, setTableData] = useState(countriesData);\n  const [sortBy, setSortBy] = useState(\"cases\");\n\n  const renderedRows = tableData.map((country, idx) => (\n    <tr key={idx}>\n      <td>{idx + 1}</td>\n      <td\n        data-testid=\"country-cell\"\n        className={classNames(\"\", {\n          \"stats-table__cell--bold\": sortBy === \"country\",\n        })}\n      >\n        {country.Country}\n      </td>\n      <td\n        className={classNames(\"stats-table__cell--warning\", {\n          \"stats-table__cell--bold\": sortBy === \"cases\",\n        })}\n      >\n        {country.TotalConfirmed}\n      </td>\n      <td\n        className={classNames(\"stats-table__cell--warning\", {\n          \"stats-table__cell--bold\": sortBy === \"new-cases\",\n        })}\n      >\n        {country.NewConfirmed}\n      </td>\n      <td\n        className={classNames(\"stats-table__cell--danger\", {\n          \"stats-table__cell--bold\": sortBy === \"deaths\",\n        })}\n      >\n        {country.TotalDeaths}\n      </td>\n      <td\n        className={classNames(\"stats-table__cell--danger\", {\n          \"stats-table__cell--bold\": sortBy === \"new-deaths\",\n        })}\n      >\n        {country.NewDeaths}\n      </td>\n      <td\n        className={classNames(\"stats-table__cell--success\", {\n          \"stats-table__cell--bold\": sortBy === \"recovered\",\n        })}\n      >\n        {country.TotalRecovered}\n      </td>\n      <td\n        className={classNames(\"stats-table__cell--success\", {\n          \"stats-table__cell--bold\": sortBy === \"new-recovered\",\n        })}\n      >\n        {country.NewRecovered}\n      </td>\n    </tr>\n  ));\n\n  useEffect(() => {\n    switch (sortBy) {\n      case \"country\":\n        const sortedByCountry = [...countriesData].sort((a, b) => (a.Country > b.Country ? 1 : -1));\n        setTableData(sortedByCountry);\n        break;\n\n      case \"cases\":\n        const sortedByCases = [...countriesData].sort(\n          (a, b) => b.TotalConfirmed - a.TotalConfirmed\n        );\n        setTableData(sortedByCases);\n        break;\n\n      case \"new-cases\":\n        const sortedByNewCases = [...countriesData].sort((a, b) => b.NewConfirmed - a.NewConfirmed);\n        setTableData(sortedByNewCases);\n        break;\n\n      case \"deaths\":\n        const sortedByDeaths = [...countriesData].sort((a, b) => b.TotalDeaths - a.TotalDeaths);\n        setTableData(sortedByDeaths);\n        break;\n\n      case \"new-deaths\":\n        const sortedByNewDeaths = [...countriesData].sort((a, b) => b.NewDeaths - a.NewDeaths);\n        setTableData(sortedByNewDeaths);\n        break;\n\n      case \"recovered\":\n        const sortedByRecovered = [...countriesData].sort(\n          (a, b) => b.TotalRecovered - a.TotalRecovered\n        );\n        setTableData(sortedByRecovered);\n        break;\n\n      case \"new-recovered\":\n        const sortedByNewRecovered = [...countriesData].sort(\n          (a, b) => b.NewRecovered - a.NewRecovered\n        );\n        setTableData(sortedByNewRecovered);\n        break;\n\n      default:\n        break;\n    }\n  }, [sortBy, countriesData]);\n\n  const handleSortedByChange = (value) => {\n    setSortBy(value);\n  };\n\n  return (\n    <div className=\"stats-table-container card card--big\">\n      <table className=\"stats-table\">\n        <thead>\n          <tr>\n            <th>Num</th>\n            <th data-tip=\"Sort by country\" onClick={() => handleSortedByChange(\"country\")}>\n              Country\n            </th>\n            <th data-tip=\"Sort by cases\" onClick={() => handleSortedByChange(\"cases\")}>\n              Total cases\n            </th>\n            <th data-tip=\"Sort by new cases\" onClick={() => handleSortedByChange(\"new-cases\")}>\n              New cases\n            </th>\n            <th data-tip=\"Sort by deaths\" onClick={() => handleSortedByChange(\"deaths\")}>\n              Total deaths\n            </th>\n            <th data-tip=\"Sort by new deaths\" onClick={() => handleSortedByChange(\"new-deaths\")}>\n              New deaths\n            </th>\n            <th data-tip=\"Sort by recovered\" onClick={() => handleSortedByChange(\"recovered\")}>\n              Total recovered\n            </th>\n            <th\n              data-tip=\"Sort by new recovered\"\n              onClick={() => handleSortedByChange(\"new-recovered\")}\n            >\n              New recovered\n            </th>\n          </tr>\n        </thead>\n        <tbody>{renderedRows}</tbody>\n      </table>\n      <ReactTooltip />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport \"./ListPage.css\";\nimport { StatsTable } from \"../../features/stats/stats-table/StatsTable\";\n\nexport const ListPage = () => {\n  const error = useSelector((state) => state.stats.error);\n\n  return (\n    <section className=\"list-page container\">\n      {error ? (\n        <div className=\"error\">\n          <p className=\"subtitle is-danger\">There was an error: {error}</p>\n        </div>\n      ) : (\n        <>\n          <header className=\"list-page__header\">\n            <h1 className=\"title\">Hello,</h1>\n            <h2 className=\"subtitle\">Here is the list of all data</h2>\n          </header>\n\n          <StatsTable />\n        </>\n      )}\n    </section>\n  );\n};\n","import React, { useEffect } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport \"./App.css\";\r\nimport { Loader } from \"./app/loader/Loader\";\r\nimport { fetchGlobalData } from \"./features/stats/statsSlice\";\r\nimport { Navbar } from \"./app/navbar/Navbar\";\r\nimport { HomePage } from \"./app/home-page/HomePage\";\r\nimport { MapPage } from \"./app/map-page/MapPage\";\r\nimport { ListPage } from \"./app/list-page/ListPage\";\r\n\r\nexport const App = () => {\r\n  const dispatch = useDispatch();\r\n  const status = useSelector((state) => state.stats.status);\r\n\r\n  useEffect(() => {\r\n    if (status === \"idle\") {\r\n      dispatch(fetchGlobalData());\r\n    }\r\n  }, [dispatch, status]);\r\n\r\n  if (status === \"idle\" || status === \"loading\") {\r\n    return (\r\n      <div data-testid=\"loader\">\r\n        <Loader fullPage={true} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <section className=\"App__navbar\">\r\n          <Navbar />\r\n        </section>\r\n\r\n        <section className=\"App__content\">\r\n          <Switch>\r\n            <Route exact path=\"/covid-tracker\" component={HomePage} />\r\n            <Route exact path=\"/covid-tracker/map\" component={MapPage} />\r\n            <Route exact path=\"/covid-tracker/list\" component={ListPage} />\r\n          </Switch>\r\n        </section>\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport statsReducer from \"../features/stats/statsSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    stats: statsReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./index.css\";\r\nimport { App } from \"./App\";\r\nimport store from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}